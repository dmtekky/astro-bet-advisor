import{r as n,s as E}from"./main-BDfILoKw.js";function R(t){const[y,g]=n.useState([]),[$,f]=n.useState(!0),[x,h]=n.useState(null),[p,d]=n.useState(null),[S,w]=n.useState(!1);n.useEffect(()=>{w(!1),d(null);async function i(){try{console.log(`[useTeams] Looking up league with key: ${t}`);const s=`league_${t}`,l=localStorage.getItem(s);if(l)try{const e=JSON.parse(l);console.log("[useTeams] Using cached league data:",e),d(e.id),w(!0);return}catch(e){console.warn("[useTeams] Error parsing cached league data, fetching fresh:",e)}const{data:o,error:_}=await E.from("leagues").select("id, name, key").eq("key",t);let u=null,r=_;if(!r&&o&&(o.length>1?console.error(`[useTeams] Multiple leagues found for key '${t}'. This indicates a data issue. Found:`,o):o.length===1&&(u=o[0])),r||!u){console.warn(`[useTeams] Could not find league with key: ${t}`,r);let e=null;try{const{data:a,error:m}=await E.from("leagues").select("id, name, key").ilike("key",t);!m&&a?a.length>1?console.error(`[useTeams] Multiple leagues found for case-insensitive key '${t}'. Found:`,a):a.length===1&&(e=a[0]):m&&console.warn("[useTeams] Case-insensitive league search itself failed:",m)}catch(a){console.warn("[useTeams] Case-insensitive league search failed:",a)}e?(console.log("[useTeams] Found league with case-insensitive search:",e),localStorage.setItem(s,JSON.stringify(e)),d(e.id),w(!0)):(console.warn("[useTeams] No league data found for key (case-insensitive):",t),d(null),w(!0))}else console.log("[useTeams] Found league:",u),localStorage.setItem(s,JSON.stringify(u)),d(u.id),w(!0)}catch(s){console.error("[useTeams] Error resolving league ID:",s),d(null),w(!0)}}i()},[t]),n.useEffect(()=>{async function i(){if(!S){console.log(`[useTeams] Waiting for league resolution of key: '${t}'.`);return}console.log(`[useTeams] Proceeding to fetch teams. LeagueKey: '${t}', ResolvedId: '${p}', ResolutionComplete: ${S}`),f(!0),h(null);try{let s=E.from("teams").select("id, external_id, name, city, abbreviation, logo_url, league_id, primary_color, secondary_color, created_at, updated_at").order("name",{ascending:!0});p?(console.log("[useTeams] Filtering teams by leagueId:",p),s=s.eq("league_id",p)):t&&console.warn(`[useTeams] League resolution for key '${t}' complete but no ID found. Fetching all teams as fallback.`),console.log("[useTeams] Executing teams query...");const{data:l,error:o,count:_}=await s;if(o)throw console.error("[useTeams] Error fetching teams:",o),o;console.log(`[useTeams] Found ${(l==null?void 0:l.length)||0} teams`);const u=(l||[]).map(r=>({id:r.id,external_id:r.external_id,name:r.name,city:r.city,abbreviation:r.abbreviation,logo_url:r.logo_url,primary_color:r.primary_color,secondary_color:r.secondary_color,league_id:r.league_id,created_at:r.created_at,updated_at:r.updated_at}));g(u),console.log("[useTeams] Teams state updated with:",u.length,"teams")}catch(s){console.error("[useTeams] Error in fetchTeams function:",s),h(s instanceof Error?s:new Error("Failed to fetch teams")),g([])}finally{f(!1)}}i()},[p,t,S]);const I=n.useMemo(()=>y.reduce((i,s)=>(i[s.id]=s,i),{}),[y]),k=n.useMemo(()=>y.reduce((i,s)=>(i[s.external_id]=s,i),{}),[y]);return{teams:y,teamMap:I,teamByExternalId:k,loading:$,error:x,resolvedLeagueId:p,isLeagueResolutionComplete:S}}function H(t={}){const[y,g]=n.useState([]),[$,f]=n.useState(!0),[x,h]=n.useState(null),[p,d]=n.useState(!0);return n.useEffect(()=>{(async()=>{if(console.log("[useUpcomingGames] fetchGames called with options:",t),t.disabled){console.log("[useUpcomingGames] Hook is disabled, returning."),g([]),f(!1),d(!1),h(null);return}f(!0),h(null);const{sport:w="all",limit:I=10,offset:k=0,date:i,teamId:s,leagueId:l}=t;try{let o=E.from("games").select(`
            id, external_id, league_id, home_team_id, away_team_id, venue_id, game_date, game_time_utc, status, home_score, away_score, home_odds, away_odds, spread, over_under, created_at, updated_at,
            leagues:league_id(name, key),
            home_team:home_team_id(*),
            away_team:away_team_id(*)
          `).order("game_time_utc",{ascending:!0}).limit(I).range(k,k+I-1);if(o=o.gte("game_time_utc",new Date().toISOString()).eq("status","scheduled"),i){const e=new Date(i+"T00:00:00Z").toISOString(),a=new Date(i+"T23:59:59Z").toISOString();o=o.gte("game_time_utc",e).lte("game_time_utc",a)}l&&(o=o.eq("league_id",l)),s&&(o=o.or(`home_team_id.eq.${s},away_team_id.eq.${s}`)),l&&(o=o.eq("league_id",l)),console.log("[useUpcomingGames] Executing Supabase query for games...");const{data:_,error:u}=await o;if(u){console.error("[useUpcomingGames] Supabase error fetching games:",u),h(u),g([]),d(!1),f(!1);return}if(d(((_==null?void 0:_.length)||0)===I),!_||_.length===0){console.log("[useUpcomingGames] No gamesData received or gamesData is empty."),g([]),f(!1);return}const r=_.map(e=>{var L,M,O,F;const a=((L=e.leagues)==null?void 0:L.key)||"other";let m=a;return a==="mlb"||a==="4424"?m="mlb":a==="nba"||a==="4387"?m="nba":a==="nfl"||a==="4391"?m="nfl":a==="nhl"||a==="4380"?m="nhl":a!=null&&a.toLowerCase().includes("soccer")&&(m="soccer"),{id:e.id,external_id:e.external_id,league_id:e.league_id,home_team_id:e.home_team_id,away_team_id:e.away_team_id,venue_id:e.venue_id,game_date:e.game_date,game_time_utc:e.game_time_utc,status:e.status,home_score:e.home_score,away_score:e.away_score,home_odds:e.home_odds,away_odds:e.away_odds,spread:e.spread,over_under:e.over_under,odds:[e.home_odds?{market:"Moneyline",outcome:"Home",price:e.home_odds}:null,e.away_odds?{market:"Moneyline",outcome:"Away",price:e.away_odds}:null,e.spread?{market:"Spread",outcome:"Home",price:e.spread}:null,e.over_under?{market:"Total",outcome:"Over",price:e.over_under}:null].filter(Boolean),created_at:e.created_at,updated_at:e.updated_at,sport:m,start_time:(()=>{const c=e.game_date,v=e.game_time_utc;if(c&&v){const U=c.split("T")[0];let D=null;const C=/(\d{2}:\d{2}:\d{2}(?:[+-]\d{2}:\d{2}|Z)?)$/,q=v.match(C);if(q&&q[1])D=q[1];else if(v.includes("T")){const T=v.split("T");T.length>1&&T[1]&&(D=T[1])}else/^\d{2}:\d{2}:\d{2}(?:[+-]\d{2}:\d{2}|Z)?$/.test(v)&&(D=v);if(U&&D){const T=`${U}T${D}`;return new Date(T).toString()==="Invalid Date"?c&&new Date(c).toString()!=="Invalid Date"?c:e.updated_at||new Date().toISOString():T}else return c&&new Date(c).toString()!=="Invalid Date"?c:e.updated_at||new Date().toISOString()}else if(c&&new Date(c).toString()!=="Invalid Date")return c;return e.updated_at||new Date().toISOString()})(),league_name:((M=e.leagues)==null?void 0:M.name)||void 0,home_team_name:((O=e.home_team)==null?void 0:O.name)||void 0,away_team_name:((F=e.away_team)==null?void 0:F.name)||void 0,home_team:e.home_team||void 0,away_team:e.away_team||void 0}});r.forEach(e=>{const a=new Date(e.start_time);isNaN(a.getTime())&&console.log("[useUpcomingGames] Problematic game data for Invalid Date (after new derivation):",{game_id:e.id,original_game_date:e.game_date,original_game_time_utc:e.game_time_utc,updated_at_from_map:e.updated_at,derived_start_time_attempt:e.start_time})}),console.log("Mapped games:",r),g(r),h(null)}catch(o){h(o),g([])}finally{f(!1)}})()},[t.sport,t.limit,t.offset,t.date,t.teamId,t.leagueId]),{games:y,loading:$,error:x,hasMore:p}}export{H as a,R as u};
//# sourceMappingURL=useUpcomingGames-oenNZVZ7.js.map
