{"version":3,"file":"SearchResults-D_mbDwjA.js","sources":["../../node_modules/lucide-react/dist/esm/icons/search.js","../../src/hooks/useSportsData.ts","../../src/pages/SearchResults.tsx"],"sourcesContent":["/**\n * @license lucide-react v0.462.0 - ISC\n *\n * This source code is licensed under the ISC license.\n * See the LICENSE file in the root directory of this source tree.\n */\n\nimport createLucideIcon from '../createLucideIcon.js';\n\nconst Search = createLucideIcon(\"Search\", [\n  [\"circle\", { cx: \"11\", cy: \"11\", r: \"8\", key: \"4ej97u\" }],\n  [\"path\", { d: \"m21 21-4.3-4.3\", key: \"1qie3q\" }]\n]);\n\nexport { Search as default };\n//# sourceMappingURL=search.js.map\n","import { useQuery } from '@tanstack/react-query';\nimport { supabase, fetchFromSupabase } from '@/lib/supabase';\nimport { Player, Team, BettingOdds, Sport, AstrologicalData } from '@/types';\nimport { calculateAstrologicalInfluence, getAstrologicalData } from '@/lib/astroCalc';\n\n// Fetch players by sport\nexport const usePlayersBySport = (sport: Sport) => {\n  return useQuery({\n    queryKey: ['players', sport],\n    queryFn: async () => {\n      return fetchFromSupabase<Player>(\n        'players',\n        supabase\n          .from('players')\n          .select('*')\n          .eq('sport', sport)\n          .order('name'),\n        `Failed to fetch ${sport} players`\n      );\n    },\n    staleTime: 5 * 60 * 1000, // 5 minutes\n  });\n};\n\n// Fetch teams by sport\nexport const useTeamsBySport = (sport: Sport) => {\n  return useQuery({\n    queryKey: ['teams', sport],\n    queryFn: async () => {\n      return fetchFromSupabase<Team>(\n        'teams',\n        supabase\n          .from('teams')\n          .select('*')\n          .eq('sport', sport)\n          .order('name'),\n        `Failed to fetch ${sport} teams`\n      );\n    },\n    staleTime: 5 * 60 * 1000, // 5 minutes\n  });\n};\n\n// Fetch betting odds for a player or team\nexport const useBettingOdds = (id: string, isTeam: boolean = false) => {\n  const idField = isTeam ? 'team_id' : 'player_id';\n  \n  return useQuery({\n    queryKey: ['bettingOdds', id, isTeam],\n    queryFn: async () => {\n      return fetchFromSupabase<BettingOdds>(\n        'betting_odds',\n        supabase\n          .from('betting_odds')\n          .select('*')\n          .eq(idField, id)\n          .order('timestamp', { ascending: false })\n          .limit(5),\n        'Failed to fetch betting odds'\n      );\n    },\n    enabled: !!id,\n    staleTime: 2 * 60 * 1000, // 2 minutes - odds change frequently\n  });\n};\n\n// Fetch astrological data for a player\nexport function useAstrologicalData(playerId: string) {\n  return useQuery({\n    queryKey: ['astrology', playerId],\n    queryFn: async () => {\n      // Import the playerAstroService\n      const { generatePlayerAstroData } = await import('@/lib/playerAstroService');\n      \n      try {\n        // Generate the data using playerAstroService with current date\n        const currentDate = new Date().toISOString().split('T')[0];\n        const astroData = await generatePlayerAstroData(currentDate);\n        \n        // Map the data to the expected format\n        return {\n          id: `generated-${playerId}-${Date.now()}`,\n          player_id: playerId,\n          timestamp: new Date().toISOString(),\n          moon_phase: astroData.moon.phase,\n          moon_sign: astroData.moon.sign,\n          planetary_signs: {\n            mercury: astroData.planets.mercury.sign,\n            venus: astroData.planets.venus.sign,\n            mars: astroData.planets.mars.sign,\n            jupiter: astroData.planets.jupiter.sign,\n            saturn: astroData.planets.saturn.sign,\n            uranus: astroData.planets.uranus.sign,\n            neptune: astroData.planets.neptune.sign,\n            pluto: astroData.planets.pluto.sign,\n          },\n          aspects: {\n            sun_moon: astroData.aspects.sun_moon,\n            sun_mars: astroData.aspects.sun_mars,\n            sun_jupiter: astroData.aspects.sun_jupiter,\n            sun_saturn: astroData.aspects.sun_saturn,\n            moon_venus: astroData.aspects.moon_venus,\n            moon_mars: astroData.aspects.moon_mars,\n          },\n          // Add any additional fields that might be expected by the application\n          mercury_retrograde: false, // You might want to calculate this based on the current date\n          created_at: new Date().toISOString(),\n          updated_at: new Date().toISOString(),\n        };\n      } catch (error) {\n        console.error('Error generating astrological data:', error);\n        throw new Error('Failed to generate astrological data');\n      }\n    },\n    enabled: !!playerId,\n    staleTime: 12 * 60 * 60 * 1000, // 12 hours - astrological data doesn't change frequently\n  });\n};\n\n// Calculate astrological influence on demand\nexport const useCalculateAstrology = (player: Player | null, date?: string) => {\n  return useQuery({\n    queryKey: ['astrologyCalculation', player?.id, date],\n    queryFn: async () => {\n      if (!player || !player.birth_date) {\n        return null;\n      }\n      \n      // Try to get from existing astrological_data first\n      const existingData = await getAstrologicalData(player.id);\n      if (existingData) {\n        return existingData;\n      }\n      \n      // Calculate new data if nothing exists\n      const calculatedData = await calculateAstrologicalInfluence(player, date);\n      return {\n        id: '',\n        player_id: player.id,\n        favorability: calculatedData.score,\n        influences: calculatedData.influences,\n        details: calculatedData.details,\n        timestamp: new Date().toISOString()\n      };\n    },\n    enabled: !!player?.id && !!player?.birth_date,\n    staleTime: 30 * 60 * 1000, // 30 minutes\n  });\n};\n\n// Fetch ephemeris data for a specific date\nexport const useEphemerisData = (date: string) => {\n  return useQuery({\n    queryKey: ['ephemeris', date],\n    queryFn: async () => {\n      return fetchFromSupabase(\n        'ephemeris',\n        supabase\n          .from('ephemeris')\n          .select('*')\n          .eq('date', date)\n          .single(),\n        'Failed to fetch ephemeris data'\n      )[0];\n    },\n    enabled: !!date,\n    staleTime: 24 * 60 * 60 * 1000, // 24 hours - ephemeris data is stable\n  });\n};\n\n// Batch fetch or calculate astrological data for multiple players\nexport const useBatchAstrology = (players: Player[], enabled: boolean = false) => {\n  return useQuery({\n    queryKey: ['astrologyBatch', players.map(p => p.id).join(',')],\n    queryFn: async () => {\n      const today = new Date().toISOString().split('T')[0];\n      const results = [];\n      \n      for (const player of players) {\n        if (player.id && player.birth_date) {\n          // Try to get existing data first\n          const existingData = await getAstrologicalData(player.id);\n          \n          if (existingData && new Date(existingData.timestamp).toDateString() === new Date().toDateString()) {\n            results.push(existingData);\n          } else {\n            // Calculate new data\n            const calculatedData = await calculateAstrologicalInfluence(player, today);\n            results.push({\n              id: '',\n              player_id: player.id,\n              favorability: calculatedData.score,\n              influences: calculatedData.influences,\n              details: calculatedData.details,\n              timestamp: new Date().toISOString()\n            });\n          }\n        }\n      }\n      \n      return results;\n    },\n    enabled: enabled && players.length > 0,\n    staleTime: 6 * 60 * 60 * 1000, // 6 hours\n  });\n};\n","import React, { useMemo } from 'react';\nimport { useSearchParams, Link } from 'react-router-dom';\nimport { useSearch } from '@/context/SearchContext';\nimport { usePlayersBySport, useTeamsBySport } from '@/hooks/useSportsData';\nimport { PlayerCard } from '@/features/dashboard/EnhancedBettingCard';\nimport { Sport } from '@/types';\nimport { Search } from 'lucide-react';\n\nconst SearchResults = () => {\n  const [searchParams] = useSearchParams();\n  const { searchQuery } = useSearch();\n  const query = searchParams.get('q') || '';\n  const [activeTab, setActiveTab] = React.useState<'players' | 'teams'>('players');\n\n  // Get all sports data\n  const sports: Sport[] = ['nba', 'mlb', 'nfl', 'boxing'];\n  \n  // Fetch players and teams from all sports\n  const allPlayers = sports.flatMap(sport => \n    usePlayersBySport(sport).data?.map(player => ({\n      ...player,\n      sport\n    })) || []\n  );\n\n  const allTeams = sports.flatMap(sport => \n    useTeamsBySport(sport).data?.map(team => ({\n      ...team,\n      sport\n    })) || []\n  );\n\n  // Filter results based on search query\n  const filteredPlayers = React.useMemo(() => {\n    if (!query.trim()) return [];\n    const searchTerm = query.toLowerCase().trim();\n    \n    return allPlayers.filter(player => \n      player.name?.toLowerCase().includes(searchTerm) ||\n      player.team?.toLowerCase().includes(searchTerm)\n    );\n  }, [allPlayers, query]);\n\n  const filteredTeams = React.useMemo(() => {\n    if (!query.trim()) return [];\n    const searchTerm = query.toLowerCase().trim();\n    \n    return allTeams.filter(team => \n      team.name?.toLowerCase().includes(searchTerm) ||\n      team.abbreviation?.toLowerCase().includes(searchTerm)\n    );\n  }, [allTeams, query]);\n\n  if (!query) {\n    return (\n      <div className=\"container py-8\">\n        <h1 className=\"text-2xl font-bold mb-4\">Search Results</h1>\n        <p>Enter a search term to find players and teams.</p>\n      </div>\n    );\n  }\n\n  type SearchResultItem = {\n    id: string;\n    type: 'player' | 'team';\n    displayName: string;\n    subtitle: string;\n    url: string;\n    sport: Sport;\n    logo?: string;\n    position?: string;\n  };\n\n  const allResults = useMemo<SearchResultItem[]>(() => {\n    const playerResults: SearchResultItem[] = filteredPlayers.map(player => ({\n      id: player.id,\n      type: 'player' as const,\n      displayName: player.name,\n      subtitle: player.team || '',\n      url: `/teams/${player.team_id}/players/${player.id}`,\n      sport: player.sport,\n      position: player.position,\n      logo: player.image // Use player's image as logo if available\n    }));\n\n    const teamResults: SearchResultItem[] = filteredTeams.map(team => ({\n      id: team.id,\n      type: 'team' as const,\n      displayName: team.name,\n      subtitle: team.sport.toUpperCase(),\n      url: `/teams/${team.id}`,\n      sport: team.sport,\n      logo: team.logo\n    }));\n\n    // Combine and sort by relevance (simple sort by name match for now)\n    return [...playerResults, ...teamResults].sort((a, b) => {\n      const aMatch = a.displayName.toLowerCase().indexOf(query.toLowerCase());\n      const bMatch = b.displayName.toLowerCase().indexOf(query.toLowerCase());\n      return aMatch - bMatch;\n    });\n  }, [filteredPlayers, filteredTeams, query]);\n\n  if (!query) {\n    return (\n      <div className=\"container py-12 flex flex-col items-center justify-center min-h-[50vh] text-center\">\n        <div className=\"bg-muted p-6 rounded-full mb-4\">\n          <Search className=\"h-8 w-8 text-muted-foreground\" />\n        </div>\n        <h1 className=\"text-2xl font-bold mb-2\">Search for players and teams</h1>\n        <p className=\"text-muted-foreground max-w-md\">\n          Enter a player name or team to search across all sports\n        </p>\n      </div>\n    );\n  }\n\n  return (\n    <div className=\"container py-8\">\n      <h1 className=\"text-2xl font-bold mb-6\">\n        Search results for \"{query}\"\n      </h1>\n      \n      {allResults.length > 0 ? (\n        <div className=\"grid gap-4 md:grid-cols-2 lg:grid-cols-3 xl:grid-cols-4\">\n          {allResults.map((item) => (\n            <Link \n              to={item.url} \n              key={`${item.type}-${item.id}`}\n              className=\"block hover:opacity-90 transition-opacity\"\n            >\n              <div className=\"border rounded-lg p-4 h-full hover:bg-muted/50 transition-colors\">\n                <div className=\"flex items-start gap-3\">\n                  {item.logo && (\n                    <img \n                      src={item.logo} \n                      alt={`${item.displayName} logo`}\n                      className=\"w-10 h-10 object-contain rounded-full bg-muted p-1\"\n                      onError={(e) => {\n                        const target = e.target as HTMLImageElement;\n                        target.style.display = 'none';\n                      }}\n                    />\n                  )}\n                  <div className=\"flex-1 min-w-0\">\n                    <h3 className=\"font-semibold truncate\">{item.displayName}</h3>\n                    <div className=\"flex items-center gap-2 text-sm text-muted-foreground\">\n                      <span className=\"inline-flex items-center px-2 py-0.5 rounded text-xs font-medium bg-primary/10 text-primary\">\n                        {item.type === 'player' ? 'Player' : 'Team'}\n                      </span>\n                      <span>•</span>\n                      <span className=\"truncate\">{item.subtitle}</span>\n                    </div>\n                  </div>\n                </div>\n                {item.type === 'player' && 'position' in item && item.position && (\n                  <div className=\"mt-2 text-sm text-muted-foreground\">\n                    {item.position}\n                  </div>\n                )}\n              </div>\n            </Link>\n          ))}\n        </div>\n      ) : (\n        <div className=\"py-12 text-center\">\n          <div className=\"bg-muted p-6 rounded-full inline-flex mb-4\">\n            <Search className=\"h-8 w-8 text-muted-foreground\" />\n          </div>\n          <h2 className=\"text-xl font-semibold mb-2\">No results found</h2>\n          <p className=\"text-muted-foreground\">\n            We couldn't find any players or teams matching \"{query}\"\n          </p>\n        </div>\n      )}\n    </div>\n  );\n};\n\nexport default SearchResults;\n"],"names":["Search","createLucideIcon","usePlayersBySport","sport","useQuery","fetchFromSupabase","supabase","useTeamsBySport","SearchResults","searchParams","useSearchParams","searchQuery","useSearch","query","activeTab","setActiveTab","React","sports","allPlayers","_a","player","allTeams","team","filteredPlayers","searchTerm","_b","filteredTeams","jsxs","jsx","allResults","useMemo","playerResults","teamResults","a","b","aMatch","bMatch","item","Link","e","target"],"mappings":"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","x_google_ignoreList":[0]}