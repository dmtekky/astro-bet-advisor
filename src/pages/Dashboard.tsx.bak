import React, { useState, useMemo } from 'react';
import DashboardLayout from '@/components/layout/DashboardLayout';
import { Card, CardHeader, CardTitle, CardContent, CardDescription } from '@/components/ui/card';
import { useUpcomingGames } from '@/hooks/useUpcomingGames';
import GameCard from '@/components/GameCard';
import { groupGamesByDate, formatGameDate, formatTime } from '@/utils/dateUtils';
import { useTeams } from '@/hooks/useTeams';
import { useAstroData } from '@/hooks/useAstroData';
import { Skeleton } from '@/components/ui/skeleton';
import { Progress } from '@/components/ui/progress';
import { ScrollArea } from '@/components/ui/scroll-area';
import { Separator } from '@/components/ui/separator';
import { Button } from '@/components/ui/button';
import { Calendar, BarChart2, Zap, Clock, Star, TrendingUp, Moon, Sun } from 'lucide-react';
import type { Team } from '@/hooks/useTeams';

// Zodiac sign data with elements and symbols
const ZODIAC_SIGNS = [
  { name: 'Aries', symbol: '♈', element: 'fire', color: '#FF6B6B' },
  { name: 'Taurus', symbol: '♉', element: 'earth', color: '#51CF66' },
  { name: 'Gemini', symbol: '♊', element: 'air', color: '#4DABF7' },
  { name: 'Cancer', symbol: '♋', element: 'water', color: '#339AF0' },
  { name: 'Leo', symbol: '♌', element: 'fire', color: '#FF922B' },
  { name: 'Virgo', symbol: '♍', element: 'earth', color: '#94D82D' },
  { name: 'Libra', symbol: '♎', element: 'air', color: '#20C997' },
  { name: 'Scorpio', symbol: '♏', element: 'water', color: '#5C7CFA' },
  { name: 'Sagittarius', symbol: '♐', element: 'fire', color: '#FFA94D' },
  { name: 'Capricorn', symbol: '♑', element: 'earth', color: '#A9E34B' },
  { name: 'Aquarius', symbol: '♒', element: 'air', color: '#3BC9DB' },
  { name: 'Pisces', symbol: '♓', element: 'water', color: '#748FFC' },
];

// Element colors
const ELEMENT_COLORS = {
  fire: 'from-amber-500/10 to-red-500/5 border-amber-500/20',
  earth: 'from-emerald-500/10 to-green-500/5 border-emerald-500/20',
  air: 'from-blue-500/10 to-cyan-500/5 border-blue-500/20',
  water: 'from-indigo-500/10 to-blue-500/5 border-indigo-500/20'
};

// Aspect colors
const ASPECT_COLORS = {
  conjunction: 'bg-purple-100 text-purple-800 dark:bg-purple-900/30 dark:text-purple-300',
  sextile: 'bg-emerald-100 text-emerald-800 dark:bg-emerald-900/30 dark:text-emerald-300',
  square: 'bg-amber-100 text-amber-800 dark:bg-amber-900/30 dark:text-amber-300',
  trine: 'bg-blue-100 text-blue-800 dark:bg-blue-900/30 dark:text-blue-300',
  opposition: 'bg-rose-100 text-rose-800 dark:bg-rose-900/30 dark:text-rose-300'
};

const MLB_LEAGUE_KEY = 'mlb';
const DEFAULT_LOGOS: Record<string, string> = {
  soccer: '/assets/sport-icons/soccer.svg',
  basketball: '/assets/sport-icons/basketball.svg',
  football: '/assets/sport-icons/football.svg',
  baseball: '/assets/sport-icons/baseball.svg',
  hockey: '/assets/sport-icons/hockey.svg',
};

// Helper function to get zodiac sign data
const getZodiacSignData = (signName: string) => {
  return ZODIAC_SIGNS.find(sign => sign.name.toLowerCase() === signName.toLowerCase()) || 
    { name: 'Unknown', symbol: '?', element: 'air', color: '#94A3B8' };
};

// Helper function to get element class
const getElementClass = (element: string) => {
  return ELEMENT_COLORS[element as keyof typeof ELEMENT_COLORS] || ELEMENT_COLORS.air;
};

const Dashboard: React.FC = () => {
  const [activeTab, setActiveTab] = useState<'games' | 'insights'>('games');
  const { teams, teamMap, teamByExternalId, loading: teamsLoading, error: teamsError } = useTeams(MLB_LEAGUE_KEY);
  const { games, loading, error } = useUpcomingGames({ sport: 'baseball_mlb', limit: 12 });
  const { astroData, loading: isLoadingAstro } = useAstroData();
  
  // Group and limit games by date
  const groupedGames = useMemo(() => groupGamesByDate(games), [games]);
  
  const currentDate = new Date();
  const formattedDate = currentDate.toLocaleDateString('en-US', {
    weekday: 'long',
    month: 'long',
    day: 'numeric',
    year: 'numeric'
  });
  
  const isLoading = loading || teamsLoading || isLoadingAstro;
  const hasError = error || teamsError;

  // Helper to find team info with proper type handling
  const findTeam = (teamId: string) => {
    // First try to find team by ID in teamMap
    if (teamMap[teamId]) {
      const team = teamMap[teamId];
      return {
        id: team.id,
        name: team.name,
        abbreviation: team.abbreviation || team.name.substring(0, 3).toUpperCase(),
        logo_url: team.logo_url,
        city: team.city || '',
        external_id: typeof team.external_id === 'number' ? team.external_id : 0
      };
    }
    
    // Then try to find by external_id (converting string teamId to number for comparison)
    const numericTeamId = Number(teamId);
    const teamByExtId = !isNaN(numericTeamId) ? teamByExternalId[numericTeamId] : undefined;
    
    if (teamByExtId) {
      return {
        id: teamByExtId.id,
        name: teamByExtId.name,
        abbreviation: teamByExtId.abbreviation || teamByExtId.name.substring(0, 3).toUpperCase(),
        logo_url: teamByExtId.logo_url,
        city: teamByExtId.city || '',
        external_id: typeof teamByExtId.external_id === 'number' ? teamByExtId.external_id : 0
      };
    }
    
    // Fallback to a default team
    return {
      id: teamId,
      name: teamId,
      abbreviation: teamId.substring(0, 3).toUpperCase(),
      city: '',
      logo_url: DEFAULT_LOGOS.baseball_mlb,
      external_id: 0
    };
  };

  return (
    <div
      style={{
        background: 'linear-gradient(135deg, #4338ca20 0%, #6366f110 100%)',
        minHeight: '100vh',
        width: '100%',
        paddingTop: '2rem',
        paddingBottom: '2rem',
      }}
    >
      <DashboardLayout>
        {/* The rest of the Dashboard content remains unchanged */}
            <div className="bg-gradient-to-br from-gray-50 to-gray-100 p-4 md:p-6">
              <div className="max-w-7xl mx-auto space-y-6">
                {/* Header */}
                <div className="flex flex-col space-y-1">
                  <h1 className="text-2xl md:text-3xl font-bold text-gray-900">Full Moon Odds</h1>
                  <p className="text-sm text-gray-500">{formattedDate}</p>
          </div>
          
          {/* Tabs */}
          <div className="flex space-x-1 p-1 bg-gray-100 rounded-lg">
            <button
              onClick={() => setActiveTab('games')}
              className={`px-4 py-2 text-sm font-medium rounded-md transition-colors ${
                activeTab === 'games' 
                  ? 'bg-white shadow-sm text-gray-900' 
                  : 'text-gray-500 hover:text-gray-700'
              }`}
            >
              Upcoming Games
            </button>
            <button
              onClick={() => setActiveTab('insights')}
              className={`px-4 py-2 text-sm font-medium rounded-md transition-colors ${
                activeTab === 'insights'
                  ? 'bg-white shadow-sm text-gray-900'
                  : 'text-gray-500 hover:text-gray-700'
              }`}
            >
              Astrological Insights
            </button>
          </div>
          
          {/* Content */}
          {isLoading ? (
            <div className="space-y-6">
              <Skeleton className="h-12 w-full rounded-lg" />
              <div className="grid grid-cols-1 md:grid-cols-2 lg:grid-cols-3 gap-6">
                {[...Array(6)].map((_, i) => (
                  <Skeleton key={i} className="h-64 rounded-xl" />
                ))}
              </div>
            </div>
          ) : hasError ? (
            <div className="p-6 bg-red-50 rounded-lg border border-red-100">
              <h3 className="text-red-800 font-medium">Error loading data</h3>
              <p className="text-red-600 mt-1 text-sm">
                {error?.message || teamsError?.message || 'Failed to load data. Please try again later.'}
              </p>
            </div>
          ) : activeTab === 'games' ? (
            <div className="space-y-8">
              {groupedGames.slice(0, 3).map(({ date, games: dateGames }) => (
                <div key={date.toString()} className="space-y-4">
                  <div className="flex items-center justify-between">
                    <h2 className="text-lg font-semibold text-gray-900">
                      {formatGameDate(date.toString())}
                    </h2>
                    <span className="text-sm text-gray-500">
                      {dateGames.length} {dateGames.length === 1 ? 'game' : 'games'}
                    </span>
                  </div>
                  <div className="grid gap-4 sm:grid-cols-1 md:grid-cols-2 lg:grid-cols-3">
                    {dateGames.map((game) => {
                      const homeTeam = findTeam(game.home_team_id);
                      const awayTeam = findTeam(game.away_team_id);
                      const defaultLogo = DEFAULT_LOGOS.baseball;
                      
                      return (
                        <GameCard 
                          key={game.id}
                          game={game}
                          homeTeam={homeTeam}
                          awayTeam={awayTeam}
                          defaultLogo={defaultLogo}
                        />
                      );
                    })}
                  </div>
                </div>
              ))}
            </div>
          ) : (
            <AstroSummarySection />
          )}
        </div>
      </div>

      {/* Astrological Insights & Forecast Section */}
      <section className="container mx-auto px-4 pb-8">
        <div className="bg-white rounded-xl border border-slate-100 shadow-sm overflow-hidden">
          {/* Header */}
          <div className="border-b border-slate-100 bg-slate-50/50 px-6 py-4">
            <div className="flex flex-col sm:flex-row sm:items-center sm:justify-between">
              <div>
                <h2 className="text-xl font-semibold text-slate-900">Cosmic Sports Forecast</h2>
                <p className="text-sm text-slate-500 mt-1">Daily astrological insights for strategic advantage</p>
              </div>
              <div className="mt-3 sm:mt-0 flex items-center space-x-3">
                <div className="text-sm text-slate-500 bg-slate-100 px-3 py-1.5 rounded-md">
                  <span className="font-medium text-slate-700">Last updated: </span>
                  {new Date().toLocaleTimeString([], { hour: '2-digit', minute: '2-digit' })}
                </div>
              </div>
            </div>
          </div>
          
          {/* Main Content */}
          <div className="p-6">
            <AstroSummarySection />
          </div>
          
          {/* Footer */}
          <div className="bg-slate-50 border-t border-slate-100 px-6 py-3 text-right">
            <p className="text-xs text-slate-500">
              Next update at {new Date(new Date().setHours(12, 0, 0, 0)).toLocaleTimeString([], { hour: '2-digit', minute: '2-digit' })} • 
              <span className="text-indigo-600 font-medium ml-1">Auto-refreshing</span>
            </p>
          </div>
        </div>
      </section>
    </DashboardLayout>
  );
};

// --- Type Definitions ---

interface ZodiacInfo {
  name: string;
  symbol: string;
  element: string;
}

interface ZodiacData {
  [key: string]: ZodiacInfo;
}

interface CurrentHour {
  ruler: string;
  influence: string;
  sign: string;
  is_positive: boolean;
}

interface AstroData {
  sun?: {
    sign?: string;
    degree?: number;
  };
  moon?: {
    phase?: string;
    sign?: string;
    degree?: number;
    illumination?: number;
  };
  mercury?: {
    sign?: string;
    degree?: number;
    retrograde?: boolean;
    speed?: number | string;
  };
  current_hour?: CurrentHour;
  lunar_nodes?: {
    north_node?: {
      sign: string;
      degree: number;
      house: number;
    };
    south_node?: {
      sign: string;
      degree: number;
      house: number;
    };
    next_transit?: {
      type: string;
      sign: string;
      date: string;
      description: string;
    };
    karmic_lessons: string[];
  };
  next_event?: {
    name: string;
    date: string;
    description: string;
    intensity: 'low' | 'medium' | 'high';
  };
}

const AstroSummarySection: React.FC = () => {
  const now = new Date();
  const dateStr = now.toISOString().split('T')[0];
  const { astroData, loading, error, refreshData } = useAstroData(dateStr);
  const [activeTab, setActiveTab] = useState<'overview' | 'planets' | 'aspects'>('overview');

  // Zodiac data with type safety
  const zodiacData: ZodiacData = {
    aries: { name: 'Aries', symbol: '♈', element: 'Fire' },
    taurus: { name: 'Taurus', symbol: '♉', element: 'Earth' },
    gemini: { name: 'Gemini', symbol: '♊', element: 'Air' },
    cancer: { name: 'Cancer', symbol: '♋', element: 'Water' },
    leo: { name: 'Leo', symbol: '♌', element: 'Fire' },
    virgo: { name: 'Virgo', symbol: '♍', element: 'Earth' },
    libra: { name: 'Libra', symbol: '♎', element: 'Air' },
    scorpio: { name: 'Scorpio', symbol: '♏', element: 'Water' },
    sagittarius: { name: 'Sagittarius', symbol: '♐', element: 'Fire' },
    capricorn: { name: 'Capricorn', symbol: '♑', element: 'Earth' },
    aquarius: { name: 'Aquarius', symbol: '♒', element: 'Air' },
    pisces: { name: 'Pisces', symbol: '♓', element: 'Water' }
  };

  // Loading state
  if (loading) {
    return (
      <div className="space-y-6">
        <div className="flex justify-between items-center">
          <Skeleton className="h-8 w-64" />
          <Skeleton className="h-10 w-32" />
        </div>
        <div className="grid grid-cols-1 md:grid-cols-2 lg:grid-cols-3 gap-6">
          {[...Array(6)].map((_, i) => (
            <Skeleton key={i} className="h-40 rounded-xl" />
          ))}
        </div>
      </div>
    );
  }

  // Error state
  if (error) {
    return (
      <div className="p-6 bg-red-50 rounded-xl border border-red-100">
        <div className="flex">
          <div className="flex-shrink-0">
            <svg className="h-5 w-5 text-red-400" viewBox="0 0 20 20" fill="currentColor">
              <path fillRule="evenodd" d="M10 18a8 8 0 100-16 8 8 0 000 16zM8.707 7.293a1 1 0 00-1.414 1.414L8.586 10l-1.293 1.293a1 1 0 101.414 1.414L10 11.414l1.293 1.293a1 1 0 001.414-1.414L11.414 10l1.293-1.293a1 1 0 00-1.414-1.414L10 8.586 8.707 7.293z" clipRule="evenodd" />
            </svg>
          </div>
          <div className="ml-3">
            <h3 className="text-sm font-medium text-red-800">Error loading astrological data</h3>
            <div className="mt-2 text-sm text-red-700">
              <p>{error.message || 'An unexpected error occurred while fetching data.'}</p>
            </div>
            <div className="mt-4">
              <button
                onClick={() => refreshData()}
                className="inline-flex items-center px-3 py-2 border border-transparent text-sm leading-4 font-medium rounded-md text-red-700 bg-red-100 hover:bg-red-200 focus:outline-none focus:ring-2 focus:ring-offset-2 focus:ring-red-500"
              >
                <svg className="-ml-0.5 mr-2 h-4 w-4" fill="none" stroke="currentColor" viewBox="0 0 24 24" xmlns="http://www.w3.org/2000/svg">
                  <path strokeLinecap="round" strokeLinejoin="round" strokeWidth={2} d="M4 4v5h.582m15.356 2A8.001 8.001 0 004.582 9m0 0H9m11 11v-5h-.581m0 0a8.003 8.003 0 01-15.357-2m15.357 2H15" />
                </svg>
                Refresh Data
              </button>
            </div>
          </div>
        </div>
      </div>
    );
  }

  // Empty state
  if (!astroData) {
    return (
      <div className="p-6 bg-yellow-50 rounded-xl border border-yellow-100">
        <div className="flex">
          <div className="flex-shrink-0">
            <svg className="h-5 w-5 text-yellow-400" viewBox="0 0 20 20" fill="currentColor">
              <path fillRule="evenodd" d="M8.257 3.099c.765-1.36 2.722-1.36 3.486 0l5.58 9.92c.75 1.334-.213 2.98-1.742 2.98H4.42c-1.53 0-2.493-1.646-1.743-2.98l5.58-9.92zM11 13a1 1 0 11-2 0 1 1 0 012 0zm-1-8a1 1 0 00-1 1v3a1 1 0 002 0V6a1 1 0 00-1-1z" clipRule="evenodd" />
            </svg>
          </div>
          <div className="ml-3">
            <h3 className="text-sm font-medium text-yellow-800">No Data Available</h3>
            <div className="mt-2 text-sm text-yellow-700">
              <p>No astrological data is currently available for the selected date.</p>
            </div>
          </div>
        </div>
      </div>
    );
  }

  // Safely access data with fallbacks
  const typedAstroData = astroData as AstroData;
  const sunSign = typedAstroData.sun?.sign?.toLowerCase() || '';
  const moonSign = typedAstroData.moon?.sign?.toLowerCase() || '';
  const mercurySign = typedAstroData.mercury?.sign?.toLowerCase() || '';
  const currentHour: CurrentHour = {
    ruler: typedAstroData.current_hour?.ruler || 'Unknown',
    influence: typedAstroData.current_hour?.influence || 'Neutral',
    sign: typedAstroData.current_hour?.sign || 'Aries',
    is_positive: typedAstroData.current_hour?.is_positive || false
  };
  
  const lunarNodes = typedAstroData.lunar_nodes || {};
  const nextEvent = typedAstroData.next_event || {
    name: 'No upcoming events',
    date: new Date().toISOString(),
    description: 'Check back later for upcoming astrological events',
    intensity: 'low' as const,
    type: 'none',
    sign: 'Aries'
  };

  // Mock elements data since it's not in the API response
  const elements = {
    fire: 25,
    earth: 25,
    air: 25,
    water: 25
  };
  const total = elements.fire + elements.earth + elements.air + elements.water;

  // Gradient colors for each element
  const gradients = {
    fire: 'from-[#ff512f] via-[#ff9966] to-[#ff512f]', // Red/orange
    earth: 'from-[#a8e063] via-[#56ab2f] to-[#a8e063]', // Green
    air: 'from-[#56ccf2] via-[#2f80ed] to-[#56ccf2]', // Blue
    water: 'from-[#43cea2] via-[#185a9d] to-[#43cea2]' // Aqua/blue
  };

  // Bar segment widths
  const fireWidth = (elements.fire / total) * 100;
  const earthWidth = (elements.earth / total) * 100;
  const airWidth = (elements.air / total) * 100;
  const waterWidth = (elements.water / total) * 100;
  
  // Format date for display
  const formatDate = (dateString: string) => {
    const options: Intl.DateTimeFormatOptions = { 
      weekday: 'long', 
      year: 'numeric', 
      month: 'long', 
      day: 'numeric' 
    };
    return new Date(dateString).toLocaleDateString('en-US', options);
  };
  
  // Get intensity color
  const getIntensityColor = (intensity: 'low' | 'medium' | 'high') => {
    switch (intensity) {
      case 'high': return 'bg-red-100 text-red-800';
      case 'medium': return 'bg-yellow-100 text-yellow-800';
      case 'low':
      default:
        return 'bg-green-100 text-green-800';
    }
  };

  return (
    <div className="space-y-6">
      {/* Elements Bar */}
      <div className="mb-8">
        <h2 className="text-lg font-semibold text-slate-900 mb-2">Elemental Balance</h2>
        <div className="w-full h-6 rounded-full overflow-hidden flex shadow-inner border border-slate-200">
          <div
            className={`h-full transition-all duration-700 bg-gradient-to-r ${gradients.fire}`}
            style={{
              width: `${fireWidth}%`,
              borderTopLeftRadius: '9999px',
              borderBottomLeftRadius: '9999px',
              borderTopRightRadius: elements.earth === 0 && elements.air === 0 && elements.water === 0 ? '9999px' : 0,
              borderBottomRightRadius: elements.earth === 0 && elements.air === 0 && elements.water === 0 ? '9999px' : 0
            }}
          />
          <div
            className={`h-full transition-all duration-700 bg-gradient-to-r ${gradients.earth}`}
            style={{
              width: `${earthWidth}%`,
              borderTopLeftRadius: elements.fire === 0 ? '9999px' : 0,
              borderBottomLeftRadius: elements.fire === 0 ? '9999px' : 0,
              borderTopRightRadius: elements.air === 0 && elements.water === 0 ? '9999px' : 0,
              borderBottomRightRadius: elements.air === 0 && elements.water === 0 ? '9999px' : 0
            }}
          />
          <div
            className={`h-full transition-all duration-700 bg-gradient-to-r ${gradients.air}`}
            style={{
              width: `${airWidth}%`,
              borderTopLeftRadius: (elements.fire === 0 && elements.earth === 0) ? '9999px' : 0,
              borderBottomLeftRadius: (elements.fire === 0 && elements.earth === 0) ? '9999px' : 0,
              borderTopRightRadius: elements.water === 0 ? '9999px' : 0,
              borderBottomRightRadius: elements.water === 0 ? '9999px' : 0
            }}
          />
          <div
            className={`h-full transition-all duration-700 bg-gradient-to-r ${gradients.water}`}
            style={{
              width: `${waterWidth}%`,
              borderTopLeftRadius: (elements.fire === 0 && elements.earth === 0 && elements.air === 0) ? '9999px' : 0,
              borderBottomLeftRadius: (elements.fire === 0 && elements.earth === 0 && elements.air === 0) ? '9999px' : 0,
              borderTopRightRadius: '9999px',
              borderBottomRightRadius: '9999px'
            }}
          />
        </div>
        {/* Legend */}
        <div className="flex justify-between mt-2 text-xs font-medium text-slate-700">
          <div className="flex items-center gap-1">
            <span className="inline-block w-3 h-3 rounded-full bg-gradient-to-r from-[#ff512f] via-[#ff9966] to-[#ff512f] mr-1" />Fire
          </div>
          <div className="flex items-center gap-1">
            <span className="inline-block w-3 h-3 rounded-full bg-gradient-to-r from-[#a8e063] via-[#56ab2f] to-[#a8e063] mr-1" />Earth
          </div>
          <div className="flex items-center gap-1">
            <span className="inline-block w-3 h-3 rounded-full bg-gradient-to-r from-[#56ccf2] via-[#2f80ed] to-[#56ccf2] mr-1" />Air
          </div>
          <div className="flex items-center gap-1">
            <span className="inline-block w-3 h-3 rounded-full bg-gradient-to-r from-[#43cea2] via-[#185a9d] to-[#43cea2] mr-1" />Water
          </div>
        </div>
      </div>
      {/* Celestial Highlights */}
      <div className="grid grid-cols-1 sm:grid-cols-2 lg:grid-cols-4 gap-4">
        {/* Sun Card */}
        <div className="bg-white border border-slate-200 rounded-lg p-4 shadow-xs">
          <div className="flex items-center justify-between mb-3">
            <h3 className="text-sm font-medium text-slate-900">Sun</h3>
            <div className={`px-2 py-1 rounded-md text-xs font-medium ${
              zodiacData[sunSign]?.element === 'Fire' ? 'bg-red-100 text-red-800' :
              zodiacData[sunSign]?.element === 'Earth' ? 'bg-amber-100 text-amber-800' :
              zodiacData[sunSign]?.element === 'Air' ? 'bg-sky-100 text-sky-800' :
              'bg-indigo-100 text-indigo-800'}`}>
              {zodiacData[sunSign]?.element || 'N/A'}
            </div>
          </div>
          <div className="flex items-center justify-between">
            <div>
              <p className="text-2xl font-semibold text-slate-900">{zodiacData[sunSign]?.name || 'N/A'}</p>
              <p className="text-sm text-slate-500">{typedAstroData.sun?.degree !== undefined ? typedAstroData.sun.degree.toFixed(1) : 'N/A'}°</p>
            </div>
            <span className="text-3xl">{zodiacData[sunSign]?.symbol || '☀️'}</span>
          </div>
        </div>
        {/* Moon Card */}
        <div className="bg-white border border-slate-200 rounded-lg p-4 shadow-xs">
          <div className="flex items-center justify-between mb-3">
            <h3 className="text-sm font-medium text-slate-900">Moon</h3>
            <div className="px-2 py-1 rounded-md text-xs font-medium bg-slate-100 text-slate-700">
              {typedAstroData.moon?.phase || 'N/A'}
            </div>
          </div>
          <div className="flex items-center justify-between">
            <div>
              <p className="text-2xl font-semibold text-slate-900">{zodiacData[moonSign]?.name || 'N/A'}</p>
              <p className="text-sm text-slate-500">{typedAstroData.moon?.degree !== undefined ? typedAstroData.moon.degree.toFixed(1) : 'N/A'}°</p>
            </div>
            <span className="text-3xl">{zodiacData[moonSign]?.symbol || '🌑'}</span>
          </div>
          {typedAstroData.moon?.illumination !== undefined && (
            <div className="mt-3">
              <div className="flex justify-between text-xs text-slate-500 mb-1">
                <span>Illumination</span>
                <span>{Math.round(typedAstroData.moon.illumination * 100)}%</span>
              </div>
              <div className="w-full bg-slate-100 rounded-full h-1.5">
                <div 
                  className="bg-indigo-600 h-1.5 rounded-full" 
                  style={{ width: `${typedAstroData.moon.illumination * 100}%` }}
                ></div>
              </div>
            </div>
          )}
        </div>
        {/* Mercury Card */}
        <div className="bg-white border border-slate-200 rounded-lg p-4 shadow-xs">
          <div className="flex items-center justify-between mb-3">
            <h3 className="text-sm font-medium text-slate-900">Mercury</h3>
            <div className={`px-2 py-1 rounded-md text-xs font-medium ${
              typedAstroData.mercury?.retrograde 
                ? 'bg-purple-100 text-purple-800' 
                : 'bg-emerald-100 text-emerald-800'}`}>
              {typedAstroData.mercury?.retrograde ? 'Retrograde' : 'Direct'}
            </div>
          </div>
          <div className="flex items-center justify-between">
            <div>
              <p className="text-2xl font-semibold text-slate-900">{zodiacData[mercurySign]?.name || 'N/A'}</p>
              <p className="text-sm text-slate-500">{typedAstroData.mercury?.degree !== undefined ? typedAstroData.mercury.degree.toFixed(1) : 'N/A'}°</p>
            </div>
            <span className="text-3xl">☿</span>
          </div>
          {typedAstroData.mercury?.speed !== undefined && (
            <div className="mt-3">
              <div className="flex justify-between text-xs text-slate-500 mb-1">
                <span>Speed</span>
                <span>{typeof typedAstroData.mercury.speed === 'number' 
                  ? `${typedAstroData.mercury.speed.toFixed(2)}°/day` 
                  : String(typedAstroData.mercury.speed)}</span>
              </div>
              <div className="w-full bg-slate-100 rounded-full h-1.5">
                <div 
                  className="bg-blue-600 h-1.5 rounded-full" 
                  style={{ 
                    width: `${Math.min(100, Math.abs(
                      typeof typedAstroData.mercury.speed === 'number' 
                        ? typedAstroData.mercury.speed 
                        : parseFloat(typedAstroData.mercury.speed) || 0
                    ) * 20)}%` 
                  }}
                ></div>
              </div>
            </div>
          )}
        </div>
        {/* Current Hour Card */}
        <div className="bg-white border border-slate-200 rounded-lg p-4 shadow-xs">
          <div className="flex items-center justify-between mb-3">
            <h3 className="text-sm font-medium text-slate-900">Current Hour</h3>
            <div className={`px-2 py-1 rounded-md text-xs font-medium ${
              currentHour.is_positive 
                ? 'bg-emerald-100 text-emerald-800' 
                : 'bg-slate-100 text-slate-800'}`}>
              {currentHour.is_positive ? 'Favorable' : 'Neutral'}
            </div>
          </div>
          <div className="mb-2">
            <p className="text-2xl font-semibold text-slate-900">Ruled by {currentHour.ruler}</p>
            <p className="text-sm text-slate-500">In {zodiacData[currentHour.sign?.toLowerCase()]?.name || 'Unknown'}</p>
          </div>
          {currentHour.influence && (
            <div className="mt-3 p-3 bg-slate-50 rounded-md border border-slate-100">
              <p className="text-sm italic text-slate-600">"{currentHour.influence}"</p>
            </div>
          )}
        </div>
      </div>
      {/* Lunar Nodes Section */}
      <div className="bg-white rounded-xl shadow p-4">
        <h4 className="font-semibold mb-3">Lunar Nodes</h4>
        <div className="grid grid-cols-1 md:grid-cols-2 gap-4">
          <div>
            <div className="flex items-center gap-2 text-sm">
              <span className="font-medium">North Node (Destiny):</span>
              <span className="text-indigo-700">
                {astroData.lunar_nodes?.north_node?.sign || 'Unknown'} {astroData.lunar_nodes?.north_node?.degree || ''}°
              </span>
            </div>
            {astroData.lunar_nodes?.karmic_lessons?.[0] && (
              <div className="mt-1 text-xs text-gray-600">
                Lesson: {astroData.lunar_nodes.karmic_lessons[0]}
              </div>
            )}
          </div>
          <div>
            <div className="flex items-center gap-2 text-sm">
              <span className="font-medium">South Node (Past):</span>
              <span className="text-indigo-700">
                {astroData.lunar_nodes?.south_node?.sign || 'Unknown'} {astroData.lunar_nodes?.south_node?.degree || ''}°
              </span>
            </div>
            {astroData.lunar_nodes?.karmic_lessons?.[1] && (
              <div className="mt-1 text-xs text-gray-600">
                Release: {astroData.lunar_nodes.karmic_lessons[1]}
              </div>
            )}
          </div>
        </div>
        {astroData.lunar_nodes?.next_transit && (
          <div className="mt-3 pt-3 border-t border-gray-100">
            <div className="text-sm">
              <span className="font-medium">Next Transit:</span>{' '}
              <span className="text-indigo-700">
                {astroData.lunar_nodes.next_transit.description} on {astroData.lunar_nodes.next_transit.date}
              </span>
            </div>
          </div>
        )}
      </div>

      {/* Upcoming Celestial Events */}
      {astroData.next_event && (
        <div className="bg-white rounded-xl shadow p-4">
          <h4 className="font-semibold mb-2">Upcoming Celestial Event</h4>
          <div className="flex items-center gap-3">
            <div className="bg-indigo-100 p-2 rounded-full">
              {astroData.next_event.type === 'full_moon' ? '🌕' : '🌑'}
            </div>
            <div>
              <div className="font-medium">
                {astroData.next_event.type === 'full_moon' ? 'Full Moon' : 'New Moon'}
              </div>
              <div className="text-sm text-gray-600">
                {astroData.next_event.date} • {astroData.next_event.sign}
              </div>
              {astroData.next_event.influence && (
                <div className="mt-1 text-xs text-gray-500">
                  "{astroData.next_event.influence}"
                </div>
              )}
            </div>
          </div>
        </div>
      )}
    </DashboardLayout>
  </div>
);

export default Dashboard;
